nextflow_process {

    name "Test Process FASTP"
    script "modules/fastp.nf"
    process "FASTP"

    test("Fastp QC on PE") {

        when {
            params {
                sample_name = "example_paired"
                reads = "${baseDir}/tests/modules/fixtures/fastp/paired_end/example_paired_{1,2}.fastq.gz"
                mode = "paired"
            }
            process {
                """
                input[0] = params.sample_name
                input[1] = channel.fromFilePairs("${params.reads}", checkIfExists: true).map { it[1] }
                input[2] = params.mode
                input[3] = channel.value("")
                input[4] = channel.value(10)
                input[5] = channel.value(10)
                input[6] = channel.value(15)
                input[7] = channel.value(10)
                """
            }
        }

        then {
            assert process.success
            assert snapshot(
                process.out.json,
                process.out.output_reads
            ).match()
        }

    }

    test("Fastp QC on SE") {

        when {
            params {
                sample_name = "single"
                reads = "${baseDir}/tests/modules/fixtures/fastp/single_end/single.fastq.gz"
                mode = "single"
            }
            process {
                """
                input[0] = params.sample_name
                input[1] = channel.fromPath("${params.readsdir}", checkIfExists: true)
                input[2] = params.mode
                input[3] = channel.value("")
                input[4] = channel.value(10)
                input[5] = channel.value(10)
                input[6] = channel.value(15)
                input[7] = channel.value(10)
                """
            }
        }

        then {
            assert process.success
            assert snapshot(
                process.out.json,
                process.out.output_reads
            ).match()
        }

    }

    test("Fastp Overlap on PE") {

        when {
            params {
                sample_name = "example_paired"
                reads = "${baseDir}/tests/modules/fixtures/fastp/paired_end/example_paired_{1,2}.fastq.gz"
                mode = "paired"
            }
            process {
                """
                input[0] = params.sample_name
                input[1] = channel.fromFilePairs("${params.reads}", checkIfExists: true).map { it[1] }
                input[2] = params.mode
                input[3] = channel.value("merged.fastq.gz")
                input[4] = channel.value(10)
                input[5] = channel.value(10)
                input[6] = channel.value(15)
                input[7] = channel.value(10)
                """
            }
        }

        then {
            assert process.success
            assert snapshot(
                process.out.json,
                process.out.overlapped_reads
            ).match()
        }

    }
}
