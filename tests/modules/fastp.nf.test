nextflow_process {

    name "Test Process FASTP"
    script "modules/fastp.nf"
    process "FASTP"

    test("Fastp QC on SE") {

        when {
            params {
                name = "single"
                reads = "/Users/kates/Desktop/EBI/pipelines/motus_pipeline/test_data/fastq/"
                mode = "single"
                merged_reads = ""
                length_filter = 10
                polya_trim_param = 10
                qualified_quality_phred = 15
                unqualified_percent_limit = 10
            }
            process {
                """
                input[0] = params.name
                input[1] = channel.fromPath("${params.reads}/${params.name}*.fastq.gz", checkIfExists: true)
                input[2] = params.mode
                input[3] = params.merged_reads
                input[4] = params.length_filter
                input[5] = params.polya_trim_param
                input[6] = params.qualified_quality_phred
                input[7] = params.unqualified_percent_limit
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
        }

    }
    test("Fastp QC on PE") {

        when {
            params {
                name = "paired"
                reads = "/Users/kates/Desktop/EBI/pipelines/motus_pipeline/test_data/fastq/"
                mode = "paired"
                merged_reads = ""
                length_filter = 10
                polya_trim_param = 10
                qualified_quality_phred = 15
                unqualified_percent_limit = 10
            }
            process {
                """
                input[0] = params.name
                input[1] = channel.fromPath("${params.reads}/${params.name}*.fastq.gz", checkIfExists: true)
                input[2] = params.mode
                input[3] = params.merged_reads
                input[4] = params.length_filter
                input[5] = params.polya_trim_param
                input[6] = params.qualified_quality_phred
                input[7] = params.unqualified_percent_limit
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
        }

    }
}
