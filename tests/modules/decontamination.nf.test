nextflow_process {

    name "Test module Decontamination"
    script "modules/decontamination.nf"
    process "DECONTAMINATION"

    test("Decontamination PE") {

        when {
            params {
                readsdir = "${baseDir}/tests/modules/fixtures/bwa/"
                sample_name = "mgtest"
                mode = "paired"
                ref_genome = "${baseDir}/tests/modules/fixtures/bwa/ref"
                ref_genome_name = "GRCh38_chr10.fasta"
            }
            process {
                """
                input[0] = channel.fromFilePairs("${params.readsdir}/${params.sample_name}_{1,2}.fastq.gz", checkIfExists: true).map { it[1] }
                input[1] = channel.fromPath(params.ref_genome)
                input[2] = channel.value(params.ref_genome_name)
                input[3] = channel.value(params.mode)
                input[4] = channel.value(params.sample_name)
                """
            }
        }

        then {
            assert process.success
            assert path(process.out.decontaminated_reads.get(0).get(0)).linesGzip.size() == 1972
            assert path(process.out.decontaminated_reads.get(0).get(0)).linesGzip.contains("CCTGATTGTATGCAGTGGAGTCTATGCAGCGAGGCCAAATCATCCCGATTGAATGCTGTGGATTATATGGAGCATGGCCCAAATCATCCCGATTGAATGCAGTGGATTCCATGCAGCGTGATTGATTGCAGTGTAATCCATGCAGCGTTG")  // content of read_1
            assert path(process.out.decontaminated_reads.get(0).get(1)).linesGzip.size() == 1972
            assert path(process.out.decontaminated_reads.get(0).get(1)).linesGzip.contains("CAAACACGCTGCATGGAATCCACTGCATTCAATCGGGATGCTTTGGGCCATGCTGGATAATATCCACTGCATTCAATCAGGATGCATTGGGCCCCGCTGCCTGGAATCCACTGCATTCAACCGCAGTGCATGGAAGCCACTGCATTCAAT") // content of read_2
        }

    }

    test("Decontamination PE reverse input order") {

        when {
            params {
                sample_name = "mgtest"
                readsdir = "${baseDir}/tests/modules/fixtures/bwa/"
                mode = "paired"
                ref_genome = "${baseDir}/tests/modules/fixtures/bwa/ref"
                ref_genome_name = "GRCh38_chr10.fasta"
            }
            process {
                """
                input[0] = channel.fromFilePairs("${params.readsdir}/${params.sample_name}_{2,1}.fastq.gz", checkIfExists: true).map { it[1] }
                input[1] = channel.fromPath(params.ref_genome)
                input[2] = channel.value(params.ref_genome_name)
                input[3] = channel.value(params.mode)
                input[4] = channel.value(params.sample_name)
                """
            }
        }

        then {
            assert process.success
            assert path(process.out.decontaminated_reads.get(0).get(0)).linesGzip.size() == 1972
            assert path(process.out.decontaminated_reads.get(0).get(0)).linesGzip.contains("CCTGATTGTATGCAGTGGAGTCTATGCAGCGAGGCCAAATCATCCCGATTGAATGCTGTGGATTATATGGAGCATGGCCCAAATCATCCCGATTGAATGCAGTGGATTCCATGCAGCGTGATTGATTGCAGTGTAATCCATGCAGCGTTG")  // content of read_1
            assert path(process.out.decontaminated_reads.get(0).get(1)).linesGzip.size() == 1972
            assert path(process.out.decontaminated_reads.get(0).get(1)).linesGzip.contains("CAAACACGCTGCATGGAATCCACTGCATTCAATCGGGATGCTTTGGGCCATGCTGGATAATATCCACTGCATTCAATCAGGATGCATTGGGCCCCGCTGCCTGGAATCCACTGCATTCAACCGCAGTGCATGGAAGCCACTGCATTCAAT") // content of read_2
        }

    }

    test("Decontamination SE") {

        when {
            params {
                sample_name = "mgtest_merged"
                readsdir = "${baseDir}/tests/modules/fixtures/bwa/"
                mode = "single"
                ref_genome = "${baseDir}/tests/modules/fixtures/bwa/ref"
                ref_genome_name = "GRCh38_chr10.fasta"
            }
            process {
                """
                input[0] = channel.fromPath("${params.readsdir}/${params.sample_name}.fastq.gz", checkIfExists: true)
                input[1] = channel.fromPath(params.ref_genome)
                input[2] = channel.value(params.ref_genome_name)
                input[3] = channel.value(params.mode)
                input[4] = channel.value(params.sample_name)
                """
            }
        }

        then {
            assert process.success
            assert path(process.out.decontaminated_reads.get(0)).linesGzip.size() == 1032
        }

    }
}
