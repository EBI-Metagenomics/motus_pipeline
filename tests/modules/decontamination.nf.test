nextflow_process {

    name "Test module Decontamination"
    script "modules/decontamination.nf"
    process "DECONTAMINATION"

    test("Decontamination PE") {

        when {
            params {
                name = "mgtest"
                reads = "${baseDir}/tests/modules/fixtures/bwa/"
                mode = "paired"
                reference_genome = "${baseDir}/tests/modules/fixtures/bwa/ref/"
                ref_gen_name = "GRCh38_chr10.fasta"
            }
            process {
                """
                input[0] = channel.fromFilePairs("${params.reads}/${params.name}_{1,2}.fastq.gz", checkIfExists: true).map { it[1] }
                input[1] = params.mode
                input[2] = channel.fromPath(params.reference_genome, checkIfExists: true)
                input[3] = params.ref_gen_name
                input[4] = params.name
                """
            }
        }

        then {
            assert process.success
            assert path(process.out.decontaminated_reads.get(0).get(0)).linesGzip.size() == 1972
            assert path(process.out.decontaminated_reads.get(0).get(0)).linesGzip.contains("CCTGATTGTATGCAGTGGAGTCTATGCAGCGAGGCCAAATCATCCCGATTGAATGCTGTGGATTATATGGAGCATGGCCCAAATCATCCCGATTGAATGCAGTGGATTCCATGCAGCGTGATTGATTGCAGTGTAATCCATGCAGCGTTG")  // content of read_1
            assert path(process.out.decontaminated_reads.get(0).get(1)).linesGzip.size() == 1972
            assert path(process.out.decontaminated_reads.get(0).get(1)).linesGzip.contains("CAAACACGCTGCATGGAATCCACTGCATTCAATCGGGATGCTTTGGGCCATGCTGGATAATATCCACTGCATTCAATCAGGATGCATTGGGCCCCGCTGCCTGGAATCCACTGCATTCAACCGCAGTGCATGGAAGCCACTGCATTCAAT") // content of read_2
        }

    }
    test("Decontamination PE reverse input order") {

        when {
            params {
                name = "mgtest"
                reads = "${baseDir}/tests/modules/fixtures/bwa/"
                mode = "paired"
                reference_genome = "${baseDir}/tests/modules/fixtures/bwa/ref/"
                ref_gen_name = "GRCh38_chr10.fasta"
            }
            process {
                """
                input[0] = channel.fromFilePairs("${params.reads}/${params.name}_{2,1}.fastq.gz", checkIfExists: true).map { it[1] }
                input[1] = params.mode
                input[2] = channel.fromPath(params.reference_genome, checkIfExists: true)
                input[3] = params.ref_gen_name
                input[4] = params.name
                """
            }
        }

        then {
            assert process.success
            assert path(process.out.decontaminated_reads.get(0).get(0)).linesGzip.size() == 1972
            assert path(process.out.decontaminated_reads.get(0).get(0)).linesGzip.contains("CCTGATTGTATGCAGTGGAGTCTATGCAGCGAGGCCAAATCATCCCGATTGAATGCTGTGGATTATATGGAGCATGGCCCAAATCATCCCGATTGAATGCAGTGGATTCCATGCAGCGTGATTGATTGCAGTGTAATCCATGCAGCGTTG")  // content of read_1
            assert path(process.out.decontaminated_reads.get(0).get(1)).linesGzip.size() == 1972
            assert path(process.out.decontaminated_reads.get(0).get(1)).linesGzip.contains("CAAACACGCTGCATGGAATCCACTGCATTCAATCGGGATGCTTTGGGCCATGCTGGATAATATCCACTGCATTCAATCAGGATGCATTGGGCCCCGCTGCCTGGAATCCACTGCATTCAACCGCAGTGCATGGAAGCCACTGCATTCAAT") // content of read_2
        }

    }
    test("Decontamination SE") {

        when {
            params {
                name = "mgtest_merged"
                reads = "${baseDir}/tests/modules/fixtures/bwa/"
                mode = "single"
                reference_genome = "${baseDir}/tests/modules/fixtures/bwa/ref/"
                ref_gen_name = "GRCh38_chr10.fasta"
            }
            process {
                """
                input[0] = channel.fromFilePairs("${params.reads}/${params.name}.fastq.gz", checkIfExists: true).map { it[1] }
                input[1] = params.mode
                input[2] = channel.fromPath(params.reference_genome, checkIfExists: true)
                input[3] = params.ref_gen_name
                input[4] = params.name
                """
            }
        }

        then {
            assert process.success
            assert path(process.out.decontaminated_reads.get(0)).linesGzip.size() == 0
        }

    }
}
