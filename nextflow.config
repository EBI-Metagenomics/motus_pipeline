manifest {
    mainScript = 'main.nf'
}

params {
    outdir = 'motus_pipeline_results'

    // --- dbs
    dbs = 'nextflow-autodownload-databases'
    download_ftp_path = 'http://ftp.ebi.ac.uk/pub/databases/metagenomics/pipeline-5.0/ref-dbs'

    // --- dbs: download names
    silva_ssu_db_name = 'silva_ssu-20200130.tar.gz'
    ssu_db_fasta = "SSU.fasta"
    ssu_db_cluster = "SSU.fasta.mscluster"
    ssu_db_tax = "slv_ssu_filtered2.txt"
    ssu_db_otu = "ssu2.otu"

    silva_lsu_db_name = 'silva_lsu-20200130.tar.gz'
    lsu_db_fasta = "LSU.fasta"
    lsu_db_cluster = "LSU.fasta.mscluster"
    lsu_db_tax = "slv_lsu_filtered2.txt"
    lsu_db_otu = "lsu2.otu"

    // --- fastp filtering
    min_length = 10
    polya_trim = 10
    qualified_quality_phred = 15
    unqualified_percent_limit = 10

    name = ''
    reads = ''
    mode = ''

    decontamination_indexes_folder = 'tests/modules/fixtures/bwa/ref2'
    decontamination_reference_index = 'GRCh38_chr10.fasta'

    // cmsearch
    covariance_model_database_ribo = '.'
    covariance_model_database = "./tests/modules/fixtures/cmsearch/"
    covariance_model_database_other = '.'
    clan_information = "./tests/modules/fixtures/cmsearch/ribo.claninfo"

    lsu_db = false
    lsu_label = "LSU"

    ssu_db = false
    ssu_label = "SSU"

    // motus
    motus_db = '.'
}

profiles {

    lsf {
        workDir = params.workdir
        executor {
            name = "lsf"
            queueSize = 200
        }
        process.cache = "lenient"
    }

    singularity {
        singularity {
            enabled = true
            autoMounts = true
            cacheDir = params.singularity_cachedir
        }
    }

    ebi {
        params {
            outdir = "motus_pipeline_results"
            databases = "/hps/nobackup/rdf/metagenomics/service-team/production/ref-dbs/"
            name = ""
            mode = ""

            workdir = "/hps/nobackup/rdf/metagenomics/nextflow-jobstore/motus_pipeline"
            singularity_cachedir = "/hps/nobackup/rdf/metagenomics/singularity_cache_nextflow/"

            min_length = 10
            polya_trim = 10
            qualified_quality_phred = 15
            unqualified_percent_limit = 10

            reads = ""

            decontamination_indexes_folder = '/hps/nobackup/rdf/metagenomics/service-team/ref-dbs/bwa/bwa-mem2-mbc/'
            decontamination_reference_index = 'hg38.fa'

            motus_db = "/hps/software/users/rdf/metagenomics/service-team/software/motus/db_mOTU_v3.0.1/"
            covariance_model_database_ribo = "/hps/nobackup/rdf/metagenomics/service-team/production/ref-dbs/mgnify-v5/Rfam/ribosomal/RF*.cm"
            covariance_model_database_other = "/hps/nobackup/rdf/metagenomics/service-team/production/ref-dbs/mgnify-v5/Rfam/other/*.cm"
            clan_information = "/hps/nobackup/rdf/metagenomics/service-team/production/ref-dbs/mgnify-v5/Rfam/ribosomal/ribo.claninfo"

            lsu_db = "/hps/nobackup/rdf/metagenomics/service-team/production/ref-dbs/mgnify-v5/silva_lsu/LSU.fasta"
            lsu_db_cluster = "/hps/nobackup/rdf/metagenomics/service-team/production/ref-dbs/mgnify-v5/silva_lsu/LSU.fasta.mscluster"
            lsu_tax = "/hps/nobackup/rdf/metagenomics/service-team/production/ref-dbs/mgnify-v5/silva_lsu/slv_lsu_filtered2.txt"
            lsu_otu = "/hps/nobackup/rdf/metagenomics/service-team/production/ref-dbs/mgnify-v5/silva_lsu/lsu2.otu"
            lsu_label = "LSU"

            ssu_db = "/hps/nobackup/rdf/metagenomics/service-team/production/ref-dbs/mgnify-v5/silva_ssu/SSU.fasta"
            ssu_db_cluster = "/hps/nobackup/rdf/metagenomics/service-team/production/ref-dbs/mgnify-v5/silva_ssu/SSU.fasta.mscluster"
            ssu_tax = "/hps/nobackup/rdf/metagenomics/service-team/production/ref-dbs/mgnify-v5/silva_ssu/slv_ssu_filtered2.txt"
            ssu_otu = "/hps/nobackup/rdf/metagenomics/service-team/production/ref-dbs/mgnify-v5/silva_ssu/ssu2.otu"
            ssu_label = "SSU"
        }
        workDir = params.workdir

        executor {
            name = "lsf"
            queueSize = 200
        }
        process.cache = "lenient"

        //includeConfig 'config/codon.config'

        singularity {
            enabled = true
            autoMounts = true
            cacheDir = params.singularity_cachedir
        }

        process {
            withLabel: process_bigmem {
                queue = 'bigmem'
            }
        }
    }

    local {
         docker {
            enabled = true
            fixOwnership = true
            autoMounts = true
        }
        executor {
            name = "local"
            cpus = 2
        }
        includeConfig 'config/local.config'
        params.databases = params.dbs
    }
}